#Oracle cleanup activity
#!/bin/sh
 
# Set the WORKSPACE variable to the CI project directory.
WORKSPACE=${CI_PROJECT_DIR}
 
# Source environment-specific configuration properties.
source $WORKSPACE/config/${env}-config.properties
echo "WORKSPACE: $WORKSPACE"
 
# Change the current working directory to WORKSPACE.
cd $WORKSPACE
 
# Define result and status file paths and initialize the error flag.
result_file=$1
status_file=$2
error_flag="false"
 
# Check if the result_file exists, and if it does, remove it.
if [[ -f "$result_file" ]]; then
   rm -rf "$result_file"
fi
 
# Check if the status_file exists, and if it does, remove it.
if [[ -f "$status_file" ]]; then
   rm -rf "$status_file"
fi
 
# Get the Oracle connection details from environment-specific properties.
connect_db_oracle=host_oracle_url
connectString_oracle=${!connect_db_oracle}
 
# Get AWS profile details for authentication.
aws_profile=profile
profile=${!aws_profile}
 
# Get AWS devops profile details.
devops_aws_profile=devops_profile
devops_profile=${!devops_aws_profile}
 
# Define S3 bucket name.
s3=s3_bucket
bucketname=${!s3}
 
# Get SSM (Systems Manager) parameter name from the environment properties.
ssm_env=ssm
ssm=${!ssm_env}
 
# Get AWS region.
aws_region=region
region=${!aws_region}
 
# Get the Git branch to clone.
git=git_branch
git_env=${!git}
 
# Check if the Oracle connection string is defined, exit with an error if not.
if [[ $connectString_oracle == "" ]]; then
    echo "Add connection details in connect_db_oracle for $env"
    exit 1;
else
    echo "Connection String Oracle: $connectString_oracle"
fi
 
# Check if the AWS profile is defined, exit with an error if not.
if [[ $profile == "" ]]; then
    echo "Add AWS profile details in awsprofiledetails for $env"
    exit 1;
else        
    echo "AWS PROFILE: $profile"
fi
 
# Create a directory for DMS (Database Migration Service) scripts.
mkdir -p $WORKSPACE/dms-scripts
 
# Clone a Git repository to get DMS scripts.
echo "Cloning repo, branch: $git_env"
git clone -b $git_env https://$gituser:$gittoken@gitlab.spectrumflow.net/hmno-devops/hmno-nsl-db-scripts.git
mv hmno-nsl-db-scripts/dms-scripts/* dms-scripts/
 
# Set the AWS profile for S3 operations.
export AWS_PROFILE=$profile
 
# Define the path for the Oracle and Redshift SQL files.
sql_file_oracle=$WORKSPACE/dms-scripts/nbophistory_remove_data_oracle.sql
echo "Oracle file: $sql_file_oracle"
 
# Determine the Oracle user based on the environment.
if [[ $env == "sit"* ]]; then
    user_oracle=${schema_oracle}_${schema_env}
else
    user_oracle=${schema_oracle}
fi
echo "ORACLE USER: $user_oracle"
 
# Fetch the Oracle password from AWS SSM Parameter Store.
ssmval_oracle=nsl-hmno-db-$schema_oracle-$ssm
 
export AWS_PROFILE=$devops_profile
echo "Fetch password from SSM $ssmval_oracle"
 
oracle_passwrd=$(aws ssm get-parameters --names $ssmval_oracle --region $region --with-decryption --query Parameters[0].Value)
 
# Check if the Oracle password was retrieved successfully.
if [[ ${oracle_passwrd} == "null" ]]; then
    echo "\"$ssmval_oracle\" key not found in SSM Parameter store in HMNO DEVOPS $region region"
    exit 1;
fi
 
# Start executing Oracle SQL queries.
echo "**** Starting oracle sql queries execution ****"
constr=$user_oracle/$oracle_passwrd@$connectString_oracle
oracle_log_file=$WORKSPACE/oracle_cleanup_logs.txt
 
# Use a Python script (db_utilities.py) to run Oracle scripts and capture the output.
python3 db_utilities.py "runOracleScript" "$sql_file_oracle" "$constr" > $oracle_log_file
 
# Check if the Python script returned an error.
if [[ "$?" != "0" ]]; then
   echo "something went wrong in script execution"
   echo "Error during executing the oracle script for cleanup data from Source AWS oracle RDS schema." > $result_file
   error_flag="true"
fi
 
# Display the content of the Oracle log file.
cat $oracle_log_file
echo "**** Execution done, checking for error ****"
 
# Check if the Oracle log file contains
if grep -q "ERROR" $oracle_log_file
then
 echo "Error during executing the oracle script. Exiting the job with code:1"
 echo "Error during executing the oracle script for cleanup data from Source AWS oracle RDS schema." > $result_file
 error_flag="true"
else
  echo "Oracle script executed successfully"
  echo "Oracle script for cleanup data from Source AWS oracle RDS schema executed successfully." > $result_file
fi

if [[ "$error_flag" == "true" ]]; then 
   echo "FAILED" > $status_file
else
   echo "SUCCESS" > $status_file
fi
