#!/bin/sh
WORKSPACE=${CI_PROJECT_DIR}
cd $WORKSPACE

#defining source for configuration
source $WORKSPACE/config/${env}-config.properties

#To set the AWS profile and region based on specific environment
aws_profile=profile
profile=${!aws_profile}

aws_region=region
region=${!aws_region}

#To check for the existence of result and status files and deletes them if they exists
result_file=$1
status_file=$2
error_flag="false"

if [[ -f "$result_file" ]]; then
   rm -rf "$result_file"
fi

if [[ -f "$status_file" ]]; then
   rm -rf "$status_file"
fi

#To ensure that an AWS profile is defined and exits with an error message if it's missing
if [[ $profile == "" ]]; then
    echo "Add AWS profile details in awsprofiledetails for $env"
    exit 1;
else        
    echo "AWS PROFILE: $profile"
fi


# to switch AWS profile and to print aws region
echo "AWS Region: $region"
export AWS_PROFILE=$profile


# To retrive information about DMS replication task, including the task name, source and target endpoint URL's
ReplicationTaskIdentifier=$(aws --region $region dms describe-replication-tasks --filters "Name=replication-task-arn,Values=$replication_task_arn" --query "ReplicationTasks[0].ReplicationTaskIdentifier")
echo "DMS Task Name : $ReplicationTaskIdentifier"

SourceEndpointArn=$(aws --region $region dms describe-replication-tasks --filters "Name=replication-task-arn,Values=$replication_task_arn" --query "ReplicationTasks[0].SourceEndpointArn")
SourceEndpointURL=$(aws --region $region dms describe-endpoints --filters "Name=endpoint-arn,Values=$SourceEndpointArn" --query "Endpoints[0].ServerName")
echo "Source DB Enpoint URL : $SourceEndpointURL"

TargetEndpointArn=$(aws --region $region dms describe-replication-tasks --filters "Name=replication-task-arn,Values=$replication_task_arn" --query "ReplicationTasks[0].TargetEndpointArn")
TargetEndpointURL=$(aws --region $region dms describe-endpoints --filters "Name=endpoint-arn,Values=$TargetEndpointArn" --query "Endpoints[0].ServerName")
echo "Target DB Enpoint URL : $TargetEndpointURL"


#To start DMS task if its not already running and waits for its status to change
echo "Starting DMS task"
check_task_status=$(aws --region $region dms describe-replication-tasks --filters "Name=replication-task-arn,Values=$replication_task_arn" --query "ReplicationTasks[0].Status")
if [ "${check_task_status}" != '"running"' ]; then
    aws dms start-replication-task --replication-task-arn $replication_task_arn --start-replication-task-type reload-target
else
    echo "Task is already running!!"
    exit 1
fi

#it monitors the task status, and if it runs successfully, it waits for the replication task to complete.

if [ $? -eq 0 ]; then

    while [ "${task_status}" != '"running"' ] && [ "${task_status}" != '"failed"' ]
    do
        echo "Checking status of DMS task"
        task_status=$(aws --region $region dms describe-replication-tasks --filters "Name=replication-task-arn,Values=$replication_task_arn" --query "ReplicationTasks[0].Status")
        echo "task status: $task_status"
		sleep 15
    done
    if [ "$task_status" = '"running"' ]; then
	   echo "DMS Task started successfully."

	   echo "Waiting for replication-task to get completed"
	   while [ "${rep_task_status}" != '"stopped"' ]
       do       
          rep_task_status=$(aws --region $region dms describe-replication-tasks --filters "Name=replication-task-arn,Values=$replication_task_arn" --query "ReplicationTasks[0].Status")
          echo "replication task status: $rep_task_status"
		  sleep 15
       done
	   
	   #aws dms wait replication-task-stopped --filters Name="replication-task-arn",Values="$replication_task_arn"
	   #the result is written to the result file
       echo "DMS Task completed successfully."
	   echo "DMS Task completed successfully." > $result_file

    elif [ "$task_status" = '"failed"' ]; then 
       echo "Error: DMS Task failed to start."
       echo "DMS Task failed." > $result_file
       error_flag="true"	   
    fi
else
    echo "Something went wrong in starting DMS Task."
    echo "Something went wrong in starting DMS Task, DMS Task failed." > $result_file
	error_flag="true"
fi

#it sets the status in status file, marking it as "Successful" or "failed" based on the error flag
if [[ "$error_flag" == "true" ]]; then 
   echo "FAILED" > $status_file
else
   echo "SUCCESS" > $status_file
fi
